1. Create new NESTJS project        
nest new homework-3-class_04                                                                                     // DONE 

2. Generate modules                                                                                              // DONE 
 - users modules
 - posts modules 

3. Generate controllers                                                                                           // DONE
 - users controller
 - posts controller 

4. Generate services     // DONE
 - users service
 -posts service

5. Create new folder in src folder and name it common and into that folder create new one and name it types
 - test/common/types    and here create 2 files INTERFACES for users and students                                     // DONE 
 - users INTERFACE
 - posts INTERFACE 



6. Define interfaces                                                                                                   // DONE 
 - User INTERFACE
  - id: number
  - name: string 
  - email: string
  - role: string
  - posts?: Post[]  (optional array for circular reference)

 - Post INTERFACE                                                                                                     // DONE 
  - id: number
  - title: string
  - content: string
  - authorId: number
  - author?: User (optional filed for circular reference)

7. Define types                                                                                                         // DONE 
 - Users: 
  - Create user type (OMIT)
  - Update user type  (PARTIAL) - optional to update name | email 
 - Posts 
  - Create posts type (OMIT)
  - Update posts type (PARTIAL & PICK ) - to update posts only title | content 

8. Implement Users Service 
 - Create mock users array with sample data                                      // DONE 
 - Inject PostsService using forwardRef                                          // DONE 
 - Implement CRUD methods:
  - findAll() - Method to find all Users                                         // DONE 
  - create () - Method to create user                                            // DONE 
  - findOne(id) - Find one user by id                                            // DONE 
  - findOneWithPosts(id) - find one user with all posts by user                  // DONE 
  - update (id) - Method to update a user name | email                           // DONE 
  - delete (id) - Method to delete a user by id                                  // DONE

9. Implement Posts Service
 - Create mock posts array with sample data                                      // DONE 
 - Inject UsersService using forwardRef                                          // DONE 
 - Implement CRUD methods:            
  - findAll () - Method to find all Posts                                        // DONE   
  - create () - Method to create posts                                           // DONE 
  - findOne (id) - Find one post by id           // DONE 
  - findByAuthorId (authorId) - Method to find one post by authorId    // DONE 
  - update (id) - Method to update a post only that can update title | content   // DONE 
  - delete (id) - Method to delete a post by id   // DONE 
 
10. Add proper HTTP status codes                                                 // DONE 


11. Implement Users Controller             - with Users Service
 - Implement route handlers:
  - @Get() findAll() - Method to find all users                                   // DONE 
  - @Post() - Method to create new User                                           // DONE 
  - @Get(id) findOne(id) - Method to find one user by id                          // DONE
  - @Get(id/with-posts) - Method to get one user with all posts by id             // DONE 
  -Put(id) - Method to update a User by id                                        // DONE 
  -@Delete(id) - Method to delete user by id                                      // DONE 

12. Implement Posts Controller             - with Posts Service
 - Implement route handlers:
  -@Get() findAll() - Method to find all posts                                     // DONE 
  -@Post () - Method to create new Post                                            // DONE 
  -@Get(id) findONe(id) - Method ot find one post by id                            // DONE 
  -@Get(by-author/authorId) - Method to find by authorId                           // DONE 
  -@Put (id) - Method to update post by id                                         // DONE 
  -@Delete(id) - Method to delete post by id 


    